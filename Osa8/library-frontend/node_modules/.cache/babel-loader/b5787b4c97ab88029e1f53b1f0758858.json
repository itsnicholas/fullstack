{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Nicholas/Programming/Fullstack/fullstack/Osa8/library-frontend/src/components/NewBook.js\";\nimport React, { useState } from 'react';\nimport { useMutation, useApolloClient, useSubscription } from '@apollo/client';\nimport { CREATE_BOOK, BOOK_ADDED, ALL_BOOKS, ALL_AUTHORS, ALL_GENRES } from './../queries';\n\nconst NewBook = props => {\n  const [title, setTitle] = useState('');\n  const [author, setAuhtor] = useState('');\n  const [published, setPublished] = useState('');\n  const [genre, setGenre] = useState('');\n  const [genres, setGenres] = useState([]);\n  const client = useApolloClient();\n  const [createBook] = useMutation(CREATE_BOOK, {\n    refetchQueries: [{\n      query: ALL_AUTHORS\n    }, {\n      query: ALL_GENRES\n    }]\n  });\n\n  const updateCacheWith = addedBook => {\n    const includedIn = (set, object) => set.map(b => b.id).includes(object.id);\n\n    const dataInStore = client.readQuery({\n      query: ALL_BOOKS\n    });\n\n    if (!includedIn(dataInStore.allBooks, addedBook)) {\n      client.writeQuery({\n        query: ALL_BOOKS,\n        data: {\n          allBooks: dataInStore.allBooks.concat(addedBook)\n        }\n      });\n\n      if (addedBook.genres) {\n        addedBook.genres.forEach(genre => {\n          const dataInStore = client.readQuery({\n            query: ALL_BOOKS,\n            variables: {\n              genre: genre\n            }\n          });\n          client.writeQuery({\n            query: ALL_BOOKS,\n            data: {\n              allBooks: dataInStore.allBooks.concat(addedBook)\n            }\n          });\n        });\n      }\n    }\n  };\n\n  useSubscription(BOOK_ADDED, {\n    onSubscriptionData: ({\n      subscriptionData\n    }) => {\n      const addedBook = subscriptionData.data.bookAdded;\n      console.log(subscriptionData.data, 'subscriptionData.data in NewBook.js');\n      window.alert(addedBook.title + ' added');\n      updateCacheWith(addedBook);\n    }\n  });\n\n  if (!props.show || !props.token) {\n    return null;\n  }\n\n  const submit = async event => {\n    event.preventDefault();\n    createBook({\n      variables: {\n        title,\n        published,\n        author,\n        genres\n      }\n    });\n    console.log('add book...');\n    setTitle('');\n    setPublished('');\n    setAuhtor('');\n    setGenres([]);\n    setGenre('');\n  };\n\n  const addGenre = () => {\n    setGenres(genres.concat(genre));\n    setGenre('');\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    onSubmit: submit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, \"title\", React.createElement(\"input\", {\n    value: title,\n    onChange: ({\n      target\n    }) => setTitle(target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, \"author\", React.createElement(\"input\", {\n    value: author,\n    onChange: ({\n      target\n    }) => setAuhtor(target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \"published\", React.createElement(\"input\", {\n    type: \"number\",\n    value: published,\n    onChange: ({\n      target\n    }) => setPublished(Number(target.value)),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    value: genre,\n    onChange: ({\n      target\n    }) => setGenre(target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: addGenre,\n    type: \"button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, \"add genre\")), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, \"genres: \", genres.join(' ')), React.createElement(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, \"create book\")));\n};\n\nexport default NewBook;","map":{"version":3,"sources":["/mnt/c/Nicholas/Programming/Fullstack/fullstack/Osa8/library-frontend/src/components/NewBook.js"],"names":["React","useState","useMutation","useApolloClient","useSubscription","CREATE_BOOK","BOOK_ADDED","ALL_BOOKS","ALL_AUTHORS","ALL_GENRES","NewBook","props","title","setTitle","author","setAuhtor","published","setPublished","genre","setGenre","genres","setGenres","client","createBook","refetchQueries","query","updateCacheWith","addedBook","includedIn","set","object","map","b","id","includes","dataInStore","readQuery","allBooks","writeQuery","data","concat","forEach","variables","onSubscriptionData","subscriptionData","bookAdded","console","log","window","alert","show","token","submit","event","preventDefault","addGenre","target","value","Number","join"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { useMutation, useApolloClient, useSubscription } from '@apollo/client'\nimport { CREATE_BOOK, BOOK_ADDED, ALL_BOOKS, ALL_AUTHORS, ALL_GENRES } from './../queries'\n\nconst NewBook = (props) => {\n  const [title, setTitle] = useState('')\n  const [author, setAuhtor] = useState('')\n  const [published, setPublished] = useState('')\n  const [genre, setGenre] = useState('')\n  const [genres, setGenres] = useState([])\n  const client = useApolloClient()\n\n  const [ createBook ] = useMutation(CREATE_BOOK, {\n    refetchQueries: [ \n      { query: ALL_AUTHORS }, \n      { query: ALL_GENRES }\n    ]\n  })\n\n  const updateCacheWith = (addedBook) => {\n    const includedIn = (set, object) => \n      set.map(b => b.id).includes(object.id)  \n\n    const dataInStore = client.readQuery({ query: ALL_BOOKS })\n    if (!includedIn(dataInStore.allBooks, addedBook)) {\n      client.writeQuery({\n        query: ALL_BOOKS,\n        data: { allBooks : dataInStore.allBooks.concat(addedBook) }\n      })\n      if (addedBook.genres) {\n        addedBook.genres.forEach(genre => {\n          const dataInStore = client.readQuery({ query: ALL_BOOKS, variables: { genre: genre } })\n          client.writeQuery({\n            query: ALL_BOOKS,\n            data: { allBooks : dataInStore.allBooks.concat(addedBook) }\n          })\n        })\n      }\n    }\n  }\n\n  useSubscription(BOOK_ADDED, {\n    onSubscriptionData: ({ subscriptionData }) => {\n      const addedBook = subscriptionData.data.bookAdded\n      console.log(subscriptionData.data, 'subscriptionData.data in NewBook.js')\n      window.alert(addedBook.title + ' added')\n      updateCacheWith(addedBook)\n    }\n  })\n\n  if (!props.show || !props.token) {\n    return null\n  }\n\n  const submit = async (event) => {\n    event.preventDefault()\n    createBook({  variables: { title, published, author, genres } })\n\n    console.log('add book...')\n\n    setTitle('')\n    setPublished('')\n    setAuhtor('')\n    setGenres([])\n    setGenre('')\n  }\n\n  const addGenre = () => {\n    setGenres(genres.concat(genre))\n    setGenre('')\n  }\n\n  return (\n    <div>\n      <form onSubmit={submit}>\n        <div>\n          title\n          <input\n            value={title}\n            onChange={({ target }) => setTitle(target.value)}\n          />\n        </div>\n        <div>\n          author\n          <input\n            value={author}\n            onChange={({ target }) => setAuhtor(target.value)}\n          />\n        </div>\n        <div>\n          published\n          <input\n            type='number'\n            value={published}\n            onChange={({ target }) => setPublished(Number(target.value))}\n          />\n        </div>\n        <div>\n          <input\n            value={genre}\n            onChange={({ target }) => setGenre(target.value)}\n          />\n          <button onClick={addGenre} type=\"button\">add genre</button>\n        </div>\n        <div>\n          genres: {genres.join(' ')}\n        </div>\n        <button type='submit'>create book</button>\n      </form>\n    </div>\n  )\n}\n\nexport default NewBook"]},"metadata":{},"sourceType":"module"}