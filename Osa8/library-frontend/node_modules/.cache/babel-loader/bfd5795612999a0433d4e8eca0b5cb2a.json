{"ast":null,"code":"import { gql } from '@apollo/client';\nexport const ALL_AUTHORS = gql`\n  query {\n    allAuthors {\n      name\n      born\n      bookCount\n    }\n  }\n`;\nexport const GET_USER = gql`\n  query {\n    me {\n      username\n      favoriteGenre\n    }\n  }\n`;\nexport const ALL_GENRES = gql`\n  query {\n    allGenres\n  }\n`;\nexport const ALL_BOOKS = gql`\n  query allBooks($genre: String) {\n    allBooks(genre: $genre) { \n      title \n      published\n      author {\n        name\n      }\n    }\n  }\n`;\nexport const LOGIN = gql`\n  mutation login($username: String!, $password: String!) {\n    login(username: $username, password: $password)  {\n      value\n    }\n  }\n`;\nexport const CREATE_BOOK = gql`\n  mutation createBook($title: String!, $published: Int!, $author: String!, $genres: [String]!) {\n    addBook(\n      title: $title,\n      author: $author,\n      published: $published,\n      genres: $genres\n    ) {\n      title\n      published\n      genres\n      author {\n        name\n      }\n    }\n  }\n`;\nexport const CHANGE_BORN = gql`\n  mutation changeBorn($name: String!, $born: Int!) {\n    editAuthor(\n      name: $name,\n      setBornTo: $born,\n    ) {\n      name\n      born\n    }\n  }\n`;","map":{"version":3,"sources":["/mnt/c/Nicholas/Programming/Fullstack/fullstack/Osa8/library-frontend/src/queries.js"],"names":["gql","ALL_AUTHORS","GET_USER","ALL_GENRES","ALL_BOOKS","LOGIN","CREATE_BOOK","CHANGE_BORN"],"mappings":"AAAA,SAASA,GAAT,QAAoB,gBAApB;AAEA,OAAO,MAAMC,WAAW,GAAGD,GAAI;;;;;;;;CAAxB;AAUP,OAAO,MAAME,QAAQ,GAAGF,GAAI;;;;;;;CAArB;AASP,OAAO,MAAMG,UAAU,GAAGH,GAAI;;;;CAAvB;AAMP,OAAO,MAAMI,SAAS,GAAGJ,GAAI;;;;;;;;;;CAAtB;AAYP,OAAO,MAAMK,KAAK,GAAGL,GAAI;;;;;;CAAlB;AAQP,OAAO,MAAMM,WAAW,GAAGN,GAAI;;;;;;;;;;;;;;;;CAAxB;AAkBP,OAAO,MAAMO,WAAW,GAAGP,GAAI;;;;;;;;;;CAAxB","sourcesContent":["import { gql } from '@apollo/client'\r\n\r\nexport const ALL_AUTHORS = gql`\r\n  query {\r\n    allAuthors {\r\n      name\r\n      born\r\n      bookCount\r\n    }\r\n  }\r\n`\r\n\r\nexport const GET_USER = gql`\r\n  query {\r\n    me {\r\n      username\r\n      favoriteGenre\r\n    }\r\n  }\r\n`\r\n\r\nexport const ALL_GENRES = gql`\r\n  query {\r\n    allGenres\r\n  }\r\n`\r\n\r\nexport const ALL_BOOKS = gql`\r\n  query allBooks($genre: String) {\r\n    allBooks(genre: $genre) { \r\n      title \r\n      published\r\n      author {\r\n        name\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const LOGIN = gql`\r\n  mutation login($username: String!, $password: String!) {\r\n    login(username: $username, password: $password)  {\r\n      value\r\n    }\r\n  }\r\n`\r\n\r\nexport const CREATE_BOOK = gql`\r\n  mutation createBook($title: String!, $published: Int!, $author: String!, $genres: [String]!) {\r\n    addBook(\r\n      title: $title,\r\n      author: $author,\r\n      published: $published,\r\n      genres: $genres\r\n    ) {\r\n      title\r\n      published\r\n      genres\r\n      author {\r\n        name\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const CHANGE_BORN = gql`\r\n  mutation changeBorn($name: String!, $born: Int!) {\r\n    editAuthor(\r\n      name: $name,\r\n      setBornTo: $born,\r\n    ) {\r\n      name\r\n      born\r\n    }\r\n  }\r\n`"]},"metadata":{},"sourceType":"module"}