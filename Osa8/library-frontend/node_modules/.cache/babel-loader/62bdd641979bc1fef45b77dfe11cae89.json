{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Nicholas/Programming/Fullstack/fullstack/Osa8/library-frontend/src/components/Books.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useQuery, useLazyQuery, useApolloClient, useSubscription } from '@apollo/client';\nimport { ALL_BOOKS, ALL_GENRES, BOOK_ADDED } from './../queries';\n\nconst Books = props => {\n  const allBooks = useQuery(ALL_BOOKS);\n  const allGenres = useQuery(ALL_GENRES);\n  const [getBooks, result] = useLazyQuery(ALL_BOOKS);\n  const [books, setBooks] = useState(null);\n  const [genres, setGenres] = useState(null);\n  const client = useApolloClient();\n\n  const updateCacheWith = addedBook => {\n    const includedIn = (set, object) => set.map(b => b.id).includes(object.id);\n\n    const dataInStore = client.readQuery({\n      query: ALL_BOOKS\n    });\n\n    if (!includedIn(dataInStore.allBooks, addedBook)) {\n      client.writeQuery({\n        query: ALL_BOOKS,\n        data: {\n          allBooks: dataInStore.allBooks.concat(addedBook)\n        }\n      }); //if (addedBook.genres) {\n      //  addedBook.genres.forEach(genre => {\n      //    const dataInStore = client.readQuery({ query: ALL_BOOKS, variables: { genre: genre } })\n      //    client.writeQuery({\n      //      query: ALL_BOOKS,\n      //      data: { allBooks : dataInStore.allBooks.concat(addedBook) }\n      //    })\n      //  })\n      //}\n    }\n  };\n\n  useSubscription(BOOK_ADDED, {\n    onSubscriptionData: ({\n      subscriptionData\n    }) => {\n      const addedBook = subscriptionData.data.bookAdded;\n      console.log(subscriptionData.data, 'subscriptionData.data in NewBook.js');\n      window.alert(addedBook.title + ' added');\n      updateCacheWith(addedBook);\n    }\n  });\n  useEffect(() => {\n    if (allBooks.data) {\n      setBooks(allBooks.data.allBooks);\n    }\n  }, [allBooks]);\n  useEffect(() => {\n    if (allGenres.data) {\n      setGenres(allGenres.data.allGenres);\n    }\n  }, [allGenres]);\n\n  const clickGenre = genre => {\n    getBooks({\n      variables: {\n        genre: genre\n      }\n    });\n  };\n\n  useEffect(() => {\n    if (result.data) {\n      setBooks(result.data.allBooks);\n      console.log(result.data.allBooks, 'result.data.allBooks in useEffect');\n    }\n  }, [result]);\n\n  if (result.loading) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"loading...\");\n  }\n\n  if (!props.show || !genres) {\n    return null;\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"books\"), React.createElement(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, \"author\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, \"published\")), books.map(a => React.createElement(\"tr\", {\n    key: a.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, a.title), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, a.author.name), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, a.published))))), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, genres.map(a => React.createElement(\"button\", {\n    key: a,\n    onClick: () => clickGenre(a),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, a)), React.createElement(\"button\", {\n    onClick: () => clickGenre(''),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, \"all genres\")));\n};\n\nexport default Books;","map":{"version":3,"sources":["/mnt/c/Nicholas/Programming/Fullstack/fullstack/Osa8/library-frontend/src/components/Books.js"],"names":["React","useState","useEffect","useQuery","useLazyQuery","useApolloClient","useSubscription","ALL_BOOKS","ALL_GENRES","BOOK_ADDED","Books","props","allBooks","allGenres","getBooks","result","books","setBooks","genres","setGenres","client","updateCacheWith","addedBook","includedIn","set","object","map","b","id","includes","dataInStore","readQuery","query","writeQuery","data","concat","onSubscriptionData","subscriptionData","bookAdded","console","log","window","alert","title","clickGenre","genre","variables","loading","show","a","author","name","published"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useQuery, useLazyQuery, useApolloClient, useSubscription } from '@apollo/client'\nimport { ALL_BOOKS, ALL_GENRES, BOOK_ADDED } from './../queries'\n\nconst Books = (props) => {\n  const allBooks = useQuery(ALL_BOOKS)\n  const allGenres = useQuery(ALL_GENRES)\n  const [getBooks, result] = useLazyQuery(ALL_BOOKS)\n  const [books, setBooks] = useState(null)\n  const [genres, setGenres] = useState(null)\n  const client = useApolloClient()\n\n  const updateCacheWith = (addedBook) => {\n    const includedIn = (set, object) => \n      set.map(b => b.id).includes(object.id)  \n\n    const dataInStore = client.readQuery({ query: ALL_BOOKS })\n    if (!includedIn(dataInStore.allBooks, addedBook)) {\n      client.writeQuery({\n        query: ALL_BOOKS,\n        data: { allBooks : dataInStore.allBooks.concat(addedBook) }\n      })\n      //if (addedBook.genres) {\n      //  addedBook.genres.forEach(genre => {\n      //    const dataInStore = client.readQuery({ query: ALL_BOOKS, variables: { genre: genre } })\n      //    client.writeQuery({\n      //      query: ALL_BOOKS,\n      //      data: { allBooks : dataInStore.allBooks.concat(addedBook) }\n      //    })\n      //  })\n      //}\n    }\n  }\n\n  useSubscription(BOOK_ADDED, {\n    onSubscriptionData: ({ subscriptionData }) => {\n      const addedBook = subscriptionData.data.bookAdded\n      console.log(subscriptionData.data, 'subscriptionData.data in NewBook.js')\n      window.alert(addedBook.title + ' added')\n      updateCacheWith(addedBook)\n    }\n  })\n\n  useEffect(() => {\n    if (allBooks.data) {\n      setBooks(allBooks.data.allBooks)\n    }\n  }, [allBooks])\n\n  useEffect(() => {\n    if (allGenres.data) {\n      setGenres(allGenres.data.allGenres)\n    }\n  }, [allGenres])\n\n  const clickGenre = (genre) => {\n    getBooks({ variables: { genre: genre } })\n  }\n\n  useEffect(() => {\n    if (result.data) {\n      setBooks(result.data.allBooks)\n      console.log(result.data.allBooks, 'result.data.allBooks in useEffect')\n    }\n  }, [result])\n\n  if (result.loading) {\n    return <div>loading...</div>\n  }\n\n  if (!props.show || !genres) {\n    return null\n  }\n\n  return (\n    <div>\n      <h2>books</h2>\n\n      <table>\n        <tbody>\n          <tr>\n            <th></th>\n            <th>\n              author\n            </th>\n            <th>\n              published\n            </th>\n          </tr>\n          {books.map(a =>\n            <tr key={a.title}>\n              <td>{a.title}</td>\n              <td>{a.author.name}</td>\n              <td>{a.published}</td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n      <div>\n        {genres.map(a =>\n          <button key={a} onClick={() => clickGenre(a)}>{a}</button>\n        )}\n        <button onClick={() => clickGenre('')}>all genres</button>\n      </div>\n    </div>\n  )\n}\n\nexport default Books"]},"metadata":{},"sourceType":"module"}