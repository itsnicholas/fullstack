{"ast":null,"code":"import { gql } from '@apollo/client';\nconst BOOK_DETAILS = gql`\n  fragment BookDetails on Book {\n    title \n    published\n    id\n    author {\n      name\n    }\n  }\n`;\nexport const ALL_AUTHORS = gql`\n  query {\n    allAuthors {\n      name\n      born\n      bookCount\n    }\n  }\n`;\nexport const GET_USER = gql`\n  query {\n    me {\n      username\n      favoriteGenre\n    }\n  }\n`;\nexport const ALL_GENRES = gql`\n  query {\n    allGenres\n  }\n`;\nexport const ALL_BOOKS = gql`\n  query allBooks($genre: String) {\n    allBooks(genre: $genre) { \n      title \n      published\n      id\n      genres\n      author {\n        name\n      }\n    }\n  }\n`;\nexport const LOGIN = gql`\n  mutation login($username: String!, $password: String!) {\n    login(username: $username, password: $password)  {\n      value\n    }\n  }\n`;\nexport const CREATE_BOOK = gql`\n  mutation createBook($title: String!, $published: Int!, $author: String!, $genres: [String]!) {\n    addBook(\n      title: $title,\n      author: $author,\n      published: $published,\n      genres: $genres\n    ) {\n      title\n      published\n      genres\n      author {\n        name\n      }\n    }\n  }\n`;\nexport const CHANGE_BORN = gql`\n  mutation changeBorn($name: String!, $born: Int!) {\n    editAuthor(\n      name: $name,\n      setBornTo: $born,\n    ) {\n      name\n      born\n    }\n  }\n`;\nexport const BOOK_ADDED = gql`\n  subscription {\n    bookAdded {\n      ...BookDetails\n    }\n  }\n  ${BOOK_DETAILS}\n`;","map":{"version":3,"sources":["/mnt/c/Nicholas/Programming/Fullstack/fullstack/Osa8/library-frontend/src/queries.js"],"names":["gql","BOOK_DETAILS","ALL_AUTHORS","GET_USER","ALL_GENRES","ALL_BOOKS","LOGIN","CREATE_BOOK","CHANGE_BORN","BOOK_ADDED"],"mappings":"AAAA,SAASA,GAAT,QAAoB,gBAApB;AAEA,MAAMC,YAAY,GAAGD,GAAI;;;;;;;;;CAAzB;AAWA,OAAO,MAAME,WAAW,GAAGF,GAAI;;;;;;;;CAAxB;AAUP,OAAO,MAAMG,QAAQ,GAAGH,GAAI;;;;;;;CAArB;AASP,OAAO,MAAMI,UAAU,GAAGJ,GAAI;;;;CAAvB;AAMP,OAAO,MAAMK,SAAS,GAAGL,GAAI;;;;;;;;;;;;CAAtB;AAcP,OAAO,MAAMM,KAAK,GAAGN,GAAI;;;;;;CAAlB;AAQP,OAAO,MAAMO,WAAW,GAAGP,GAAI;;;;;;;;;;;;;;;;CAAxB;AAkBP,OAAO,MAAMQ,WAAW,GAAGR,GAAI;;;;;;;;;;CAAxB;AAYP,OAAO,MAAMS,UAAU,GAAGT,GAAI;;;;;;IAM1BC,YAAa;CANV","sourcesContent":["import { gql } from '@apollo/client'\r\n\r\nconst BOOK_DETAILS = gql`\r\n  fragment BookDetails on Book {\r\n    title \r\n    published\r\n    id\r\n    author {\r\n      name\r\n    }\r\n  }\r\n`\r\n\r\nexport const ALL_AUTHORS = gql`\r\n  query {\r\n    allAuthors {\r\n      name\r\n      born\r\n      bookCount\r\n    }\r\n  }\r\n`\r\n\r\nexport const GET_USER = gql`\r\n  query {\r\n    me {\r\n      username\r\n      favoriteGenre\r\n    }\r\n  }\r\n`\r\n\r\nexport const ALL_GENRES = gql`\r\n  query {\r\n    allGenres\r\n  }\r\n`\r\n\r\nexport const ALL_BOOKS = gql`\r\n  query allBooks($genre: String) {\r\n    allBooks(genre: $genre) { \r\n      title \r\n      published\r\n      id\r\n      genres\r\n      author {\r\n        name\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const LOGIN = gql`\r\n  mutation login($username: String!, $password: String!) {\r\n    login(username: $username, password: $password)  {\r\n      value\r\n    }\r\n  }\r\n`\r\n\r\nexport const CREATE_BOOK = gql`\r\n  mutation createBook($title: String!, $published: Int!, $author: String!, $genres: [String]!) {\r\n    addBook(\r\n      title: $title,\r\n      author: $author,\r\n      published: $published,\r\n      genres: $genres\r\n    ) {\r\n      title\r\n      published\r\n      genres\r\n      author {\r\n        name\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const CHANGE_BORN = gql`\r\n  mutation changeBorn($name: String!, $born: Int!) {\r\n    editAuthor(\r\n      name: $name,\r\n      setBornTo: $born,\r\n    ) {\r\n      name\r\n      born\r\n    }\r\n  }\r\n`\r\n\r\nexport const BOOK_ADDED = gql`\r\n  subscription {\r\n    bookAdded {\r\n      ...BookDetails\r\n    }\r\n  }\r\n  ${BOOK_DETAILS}\r\n`"]},"metadata":{},"sourceType":"module"}